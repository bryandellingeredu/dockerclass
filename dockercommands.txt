docker build .					            creates the image from the docker file
docker build -t {name}:{tag}			    tag is optional

docker images					            shows you the images and ids you just built
						
---------------------------------------run-----------------------------------------------------------------------
docker run -p 3000:80 f1683ec808fd 		    runs the container with id f1683ec808fd local port 3000 docker port 80. (you could also just use first chars of id) (makes a new container)(attached mode default)
docker run -p 3000:80  -d f1683ec808fd		runs the container detached
docker run -it f1683ec808fd		            run in interactive mode with terminal (for console apps)
--rm						                auto remove container after it stops
--name {containername}				        name the container
docker run -p 3000:80 -d --rm --name feedback-app feedback-node

--------------------------------ps-----------------------------------------------------------------------------------
docker ps					see the running processes
docker ps -a                see all the containers

-------------------starting stopping attaching detaching---------------------------------------------------
docker stop {containername}	        	        stop the running process named {containername}
docker start {containername}                    restart the docker container.   (detached mode default)
docker attach {containername}                   attach to detached container
docker -a -i {containername}			        restart console app (interactive)
docker logs {containername}                     see the logs of a detached container
docker logs -f {containername}                  see the logs of a detached container and keep seeing them

------------------------------container and image management--------------------------------------------------

docker rm {containername} 			            remove container name/s separated by white space
docker container prune				            remove all containers
docker rmi 2db8130d0a34				            remove image 
docker image prune				                remove all unused images
docker image prune -a				            remove all unused images including named images

docker image inspect {imageid}			        info on an image

------------------------------------------copying-------------------------------------------------------------------------
docker cp dummy/test.txt  {containername}:/{path}	   copy file into running container
docker cp dummy/.  {containername}:/{path}             copy folder into running container
        switch it to copy from running container to local machine

docker cp {containername}:/{path} dummy
docker cp {containername}:/{path}/text.txt dummy

------------------------------------------------sharing-------------------------------------------------------------------
docker tag node-demo:latest academind/node-hello-world              rename to the name of the docker hub repo
docker login -u                                                       login to docker with access token
docker push and to get back docker pull

------------------------------------volumes-------------------------------------------------------
docker volume ls            list docker volumes
------------------------named volume -v--------------------------
docker run -p 3000:80 -d --rm --name feedback-app -v feedback:/app/feedback feedback-node       app/feedback is stored in feedback.
------------------------remove---------------------------
docker volume rm VOL_NAME or docker volume prune.
---------------------bind mount-------------------------

docker run -p 3000:80 -d --rm --name feedback-app -v feedback:/app/feedback -v "C:/code/Docker/data-volumes-01-starting-setup:/app" -v/app/node_modules feedback-node 

docker run -p 3000:80 -d --rm --name feedback-app -v feedback:/app/feedback -v "C:/code/Docker/data-volumes-01-starting-setup:/app:ro" -v/app/node_modules feedback-node
(ro makes it read only) 

shortcut for bind mount is -v "%cd%":/app

--------------------------environment variablese------------------------------------------------------------------------------------
docker run -p 3000:8000 --env PORT=8000 -d --rm --name feedback-app -v feedback:/app/feedback -v "C:/code/Docker/data-volumes-01-starting-setup:/app" -v/app/node_modules feedback-node 
--set environment.

docker run -p 3000:8000 --env-file -d --rm --name feedback-app -v feedback:/app/feedback -v "C:/code/Docker/data-volumes-01-starting-setup:/app" -v/app/node_modules feedback-node 
-- if you have environment file


--running with a named network --------------------------------------------------------------
docker network create my-network
docker run -d --name mongo --network my-network mongo
 docker run --name favorites --network my-network -d --rm -p 3000:3000 favorites-node

 (update your app.js 'mongodb://mongo:27017/swfavorites')

 ----------------------compose
 docker compose up -d
 docker compose up --build -d (force a rebuild)
 docker-compose down -v  (removes volumes as well)


 ---------------------------utility containers
 docker exec -it  {containername}    npm init                     allows you to run commands against a running container
 docker run =it node npm init                                     overrides the initial command
 docker run -it -v C:/code/dockerclass/utility_container:/app node-util npm init
 docker-compose run --rm {servicename}  {cmd}         run a single service

